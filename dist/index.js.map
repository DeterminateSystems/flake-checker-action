{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import * as actionsCore from \"@actions/core\";\nimport * as actionsExec from \"@actions/exec\";\nimport { DetSysAction, inputs } from \"detsys-ts\";\n\nconst EVENT_EXECUTION_FAILURE = \"execution_failure\";\n\nclass FlakeCheckerAction extends DetSysAction {\n  flakeLockPath: string;\n  nixpkgsKeys: string;\n  checkOutdated: boolean;\n  checkOwner: boolean;\n  checkSupported: boolean;\n  ignoreMissingFlakeLock: boolean;\n  failMode: boolean;\n  sendStatistics: boolean;\n\n  constructor() {\n    super({\n      name: \"flake-checker\",\n      fetchStyle: \"gh-env-style\",\n      diagnosticsUrl: new URL(\n        \"https://install.determinate.systems/flake-checker/telemetry\",\n      ),\n      // We don't need Nix in this Action because we fetch a static binary using curl and run it\n      requireNix: \"ignore\",\n    });\n\n    this.flakeLockPath = inputs.getString(\"flake-lock-path\");\n    this.nixpkgsKeys = inputs.getString(\"nixpkgs-keys\");\n    this.checkOutdated = inputs.getBool(\"check-outdated\");\n    this.checkOwner = inputs.getBool(\"check-owner\");\n    this.checkSupported = inputs.getBool(\"check-supported\");\n    this.ignoreMissingFlakeLock = inputs.getBool(\"ignore-missing-flake-lock\");\n    this.failMode = inputs.getBool(\"fail-mode\");\n    this.sendStatistics = inputs.getBool(\"send-statistics\");\n  }\n\n  async main(): Promise<void> {\n    await this.checkFlake();\n  }\n\n  // No post step\n  async post(): Promise<void> {}\n\n  private async checkFlake(): Promise<number> {\n    const binaryPath = await this.fetchExecutable();\n    const executionEnv = await this.executionEnvironment();\n\n    actionsCore.debug(\n      `Execution environment: ${JSON.stringify(executionEnv, null, 4)}`,\n    );\n\n    const exitCode = await actionsExec.exec(binaryPath, [], {\n      env: {\n        ...executionEnv,\n        ...process.env, // To get $PATH, etc\n      },\n      ignoreReturnCode: true,\n    });\n\n    if (exitCode !== 0) {\n      this.recordEvent(EVENT_EXECUTION_FAILURE, {\n        exitCode,\n      });\n      actionsCore.setFailed(`Non-zero exit code of \\`${exitCode}\\`.`);\n    }\n\n    return exitCode;\n  }\n\n  private async executionEnvironment(): Promise<ExecutionEnvironment> {\n    const executionEnv: ExecutionEnvironment = {};\n\n    executionEnv.NIX_FLAKE_CHECKER_FLAKE_LOCK_PATH = this.flakeLockPath;\n    executionEnv.NIX_FLAKE_CHECKER_NIXPKGS_KEYS = this.nixpkgsKeys;\n\n    if (!this.sendStatistics) {\n      executionEnv.NIX_FLAKE_CHECKER_NO_TELEMETRY = \"false\";\n    }\n\n    if (!this.checkOutdated) {\n      executionEnv.NIX_FLAKE_CHECKER_CHECK_OUTDATED = \"false\";\n    }\n\n    if (!this.checkOwner) {\n      executionEnv.NIX_FLAKE_CHECKER_CHECK_OWNER = \"false\";\n    }\n\n    if (!this.checkSupported) {\n      executionEnv.NIX_FLAKE_CHECKER_CHECK_SUPPORTED = \"false\";\n    }\n\n    if (!this.ignoreMissingFlakeLock) {\n      executionEnv.NIX_FLAKE_CHECKER_IGNORE_MISSING_FLAKE_LOCK = \"false\";\n    }\n\n    if (this.failMode) {\n      executionEnv.NIX_FLAKE_CHECKER_FAIL_MODE = \"true\";\n    }\n\n    return executionEnv;\n  }\n}\n\ntype ExecutionEnvironment = {\n  // All env vars are strings, no fanciness here.\n  RUST_BACKTRACE?: string;\n  NIX_FLAKE_CHECKER_FLAKE_LOCK_PATH?: string;\n  NIX_FLAKE_CHECKER_NIXPKGS_KEYS?: string;\n  NIX_FLAKE_CHECKER_NO_TELEMETRY?: string;\n  NIX_FLAKE_CHECKER_CHECK_OUTDATED?: string;\n  NIX_FLAKE_CHECKER_CHECK_OWNER?: string;\n  NIX_FLAKE_CHECKER_CHECK_SUPPORTED?: string;\n  NIX_FLAKE_CHECKER_IGNORE_MISSING_FLAKE_LOCK?: string;\n  NIX_FLAKE_CHECKER_FAIL_MODE?: string;\n};\n\nfunction main(): void {\n  new FlakeCheckerAction().execute();\n}\n\nmain();\n"],"mappings":";AAAA,YAAY,iBAAiB;AAC7B,YAAY,iBAAiB;AAC7B,SAAS,cAAc,cAAc;AAErC,IAAM,0BAA0B;AAEhC,IAAM,qBAAN,cAAiC,aAAa;AAAA,EAU5C,cAAc;AACZ,UAAM;AAAA,MACJ,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,gBAAgB,IAAI;AAAA,QAClB;AAAA,MACF;AAAA;AAAA,MAEA,YAAY;AAAA,IACd,CAAC;AAED,SAAK,gBAAgB,OAAO,UAAU,iBAAiB;AACvD,SAAK,cAAc,OAAO,UAAU,cAAc;AAClD,SAAK,gBAAgB,OAAO,QAAQ,gBAAgB;AACpD,SAAK,aAAa,OAAO,QAAQ,aAAa;AAC9C,SAAK,iBAAiB,OAAO,QAAQ,iBAAiB;AACtD,SAAK,yBAAyB,OAAO,QAAQ,2BAA2B;AACxE,SAAK,WAAW,OAAO,QAAQ,WAAW;AAC1C,SAAK,iBAAiB,OAAO,QAAQ,iBAAiB;AAAA,EACxD;AAAA,EAEA,MAAM,OAAsB;AAC1B,UAAM,KAAK,WAAW;AAAA,EACxB;AAAA;AAAA,EAGA,MAAM,OAAsB;AAAA,EAAC;AAAA,EAE7B,MAAc,aAA8B;AAC1C,UAAM,aAAa,MAAM,KAAK,gBAAgB;AAC9C,UAAM,eAAe,MAAM,KAAK,qBAAqB;AAErD,IAAY;AAAA,MACV,0BAA0B,KAAK,UAAU,cAAc,MAAM,CAAC,CAAC;AAAA,IACjE;AAEA,UAAM,WAAW,MAAkB,iBAAK,YAAY,CAAC,GAAG;AAAA,MACtD,KAAK;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA;AAAA,MACb;AAAA,MACA,kBAAkB;AAAA,IACpB,CAAC;AAED,QAAI,aAAa,GAAG;AAClB,WAAK,YAAY,yBAAyB;AAAA,QACxC;AAAA,MACF,CAAC;AACD,MAAY,sBAAU,2BAA2B,QAAQ,KAAK;AAAA,IAChE;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAc,uBAAsD;AAClE,UAAM,eAAqC,CAAC;AAE5C,iBAAa,oCAAoC,KAAK;AACtD,iBAAa,iCAAiC,KAAK;AAEnD,QAAI,CAAC,KAAK,gBAAgB;AACxB,mBAAa,iCAAiC;AAAA,IAChD;AAEA,QAAI,CAAC,KAAK,eAAe;AACvB,mBAAa,mCAAmC;AAAA,IAClD;AAEA,QAAI,CAAC,KAAK,YAAY;AACpB,mBAAa,gCAAgC;AAAA,IAC/C;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,mBAAa,oCAAoC;AAAA,IACnD;AAEA,QAAI,CAAC,KAAK,wBAAwB;AAChC,mBAAa,8CAA8C;AAAA,IAC7D;AAEA,QAAI,KAAK,UAAU;AACjB,mBAAa,8BAA8B;AAAA,IAC7C;AAEA,WAAO;AAAA,EACT;AACF;AAeA,SAAS,OAAa;AACpB,MAAI,mBAAmB,EAAE,QAAQ;AACnC;AAEA,KAAK;","names":[]}