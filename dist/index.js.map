{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import * as actionsCore from \"@actions/core\";\nimport * as actionsExec from \"@actions/exec\";\nimport { IdsToolbox } from \"detsys-ts\";\n\nclass FlakeCheckerAction {\n  idslib: IdsToolbox;\n  flakeLockPath: string;\n  nixpkgsKeys: string;\n  checkOutdated: boolean;\n  checkOwner: boolean;\n  checkSupported: boolean;\n  ignoreMissingFlakeLock: boolean;\n  failMode: boolean;\n  sendStatistics: boolean;\n\n  constructor() {\n    this.idslib = new IdsToolbox({\n      name: \"flake-checker\",\n      fetchStyle: \"gh-env-style\",\n      diagnosticsUrl: new URL(\n        \"https://install.determinate.systems/flake-checker/telemetry\",\n      ),\n    });\n\n    this.flakeLockPath =\n      actionInputStringOrNull(\"flake-lock-path\") || \"flake.lock\";\n    this.nixpkgsKeys = actionInputStringOrNull(\"nixpkgs-keys\") || \"nixpkgs\";\n\n    this.checkOutdated = actionInputBool(\"check-outdated\");\n    this.checkOwner = actionInputBool(\"check-owner\");\n    this.checkSupported = actionInputBool(\"check-supported\");\n\n    this.ignoreMissingFlakeLock = actionInputBool(\"ignore-missing-flake-lock\");\n\n    this.failMode = actionInputBool(\"fail-mode\");\n    this.sendStatistics = actionInputBool(\"send-statistics\");\n  }\n\n  private async executionEnvironment(): Promise<ExecuteEnvironment> {\n    const executionEnv: ExecuteEnvironment = {};\n\n    executionEnv.NIX_FLAKE_CHECKER_FLAKE_LOCK_PATH = this.flakeLockPath;\n    executionEnv.NIX_FLAKE_CHECKER_NIXPKGS_KEYS = this.nixpkgsKeys;\n\n    if (!this.sendStatistics) {\n      executionEnv.NIX_FLAKE_CHECKER_NO_TELEMETRY = \"false\";\n    }\n\n    if (!this.checkOutdated) {\n      executionEnv.NIX_FLAKE_CHECKER_CHECK_OUTDATED = \"false\";\n    }\n\n    if (!this.checkOwner) {\n      executionEnv.NIX_FLAKE_CHECKER_CHECK_OWNER = \"false\";\n    }\n\n    if (!this.checkSupported) {\n      executionEnv.NIX_FLAKE_CHECKER_CHECK_SUPPORTED = \"false\";\n    }\n\n    if (!this.ignoreMissingFlakeLock) {\n      executionEnv.NIX_FLAKE_CHECKER_IGNORE_MISSING_FLAKE_LOCK = \"false\";\n    }\n\n    if (this.failMode) {\n      executionEnv.NIX_FLAKE_CHECKER_FAIL_MODE = \"true\";\n    }\n\n    return executionEnv;\n  }\n\n  async check(): Promise<number> {\n    const binaryPath = await this.idslib.fetchExecutable();\n\n    const executionEnv = await this.executionEnvironment();\n    actionsCore.debug(\n      `Execution environment: ${JSON.stringify(executionEnv, null, 4)}`,\n    );\n\n    const exitCode = await actionsExec.exec(binaryPath, [], {\n      env: {\n        ...executionEnv,\n        ...process.env, // To get $PATH, etc\n      },\n    });\n\n    if (exitCode !== 0) {\n      this.idslib.recordEvent(\"execution_failure\", {\n        exitCode,\n      });\n      throw new Error(`Non-zero exit code of \\`${exitCode}\\` detected`);\n    }\n\n    return exitCode;\n  }\n}\n\ntype ExecuteEnvironment = {\n  // All env vars are strings, no fanciness here.\n  RUST_BACKTRACE?: string;\n  NIX_FLAKE_CHECKER_FLAKE_LOCK_PATH?: string;\n  NIX_FLAKE_CHECKER_NIXPKGS_KEYS?: string;\n  NIX_FLAKE_CHECKER_NO_TELEMETRY?: string;\n  NIX_FLAKE_CHECKER_CHECK_OUTDATED?: string;\n  NIX_FLAKE_CHECKER_CHECK_OWNER?: string;\n  NIX_FLAKE_CHECKER_CHECK_SUPPORTED?: string;\n  NIX_FLAKE_CHECKER_IGNORE_MISSING_FLAKE_LOCK?: string;\n  NIX_FLAKE_CHECKER_FAIL_MODE?: string;\n};\n\nfunction actionInputStringOrNull(name: string): string | null {\n  const value = actionsCore.getInput(name);\n  if (value === \"\") {\n    return null;\n  } else {\n    return value;\n  }\n}\n\nfunction actionInputBool(name: string): boolean {\n  return actionsCore.getBooleanInput(name);\n}\n\nfunction main(): void {\n  const checker = new FlakeCheckerAction();\n\n  checker.idslib.onMain(async () => {\n    await checker.check();\n  });\n\n  checker.idslib.execute();\n}\n\nmain();\n"],"mappings":";AAAA,YAAY,iBAAiB;AAC7B,YAAY,iBAAiB;AAC7B,SAAS,kBAAkB;AAE3B,IAAM,qBAAN,MAAyB;AAAA,EAWvB,cAAc;AACZ,SAAK,SAAS,IAAI,WAAW;AAAA,MAC3B,MAAM;AAAA,MACN,YAAY;AAAA,MACZ,gBAAgB,IAAI;AAAA,QAClB;AAAA,MACF;AAAA,IACF,CAAC;AAED,SAAK,gBACH,wBAAwB,iBAAiB,KAAK;AAChD,SAAK,cAAc,wBAAwB,cAAc,KAAK;AAE9D,SAAK,gBAAgB,gBAAgB,gBAAgB;AACrD,SAAK,aAAa,gBAAgB,aAAa;AAC/C,SAAK,iBAAiB,gBAAgB,iBAAiB;AAEvD,SAAK,yBAAyB,gBAAgB,2BAA2B;AAEzE,SAAK,WAAW,gBAAgB,WAAW;AAC3C,SAAK,iBAAiB,gBAAgB,iBAAiB;AAAA,EACzD;AAAA,EAEA,MAAc,uBAAoD;AAChE,UAAM,eAAmC,CAAC;AAE1C,iBAAa,oCAAoC,KAAK;AACtD,iBAAa,iCAAiC,KAAK;AAEnD,QAAI,CAAC,KAAK,gBAAgB;AACxB,mBAAa,iCAAiC;AAAA,IAChD;AAEA,QAAI,CAAC,KAAK,eAAe;AACvB,mBAAa,mCAAmC;AAAA,IAClD;AAEA,QAAI,CAAC,KAAK,YAAY;AACpB,mBAAa,gCAAgC;AAAA,IAC/C;AAEA,QAAI,CAAC,KAAK,gBAAgB;AACxB,mBAAa,oCAAoC;AAAA,IACnD;AAEA,QAAI,CAAC,KAAK,wBAAwB;AAChC,mBAAa,8CAA8C;AAAA,IAC7D;AAEA,QAAI,KAAK,UAAU;AACjB,mBAAa,8BAA8B;AAAA,IAC7C;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,QAAyB;AAC7B,UAAM,aAAa,MAAM,KAAK,OAAO,gBAAgB;AAErD,UAAM,eAAe,MAAM,KAAK,qBAAqB;AACrD,IAAY;AAAA,MACV,0BAA0B,KAAK,UAAU,cAAc,MAAM,CAAC,CAAC;AAAA,IACjE;AAEA,UAAM,WAAW,MAAkB,iBAAK,YAAY,CAAC,GAAG;AAAA,MACtD,KAAK;AAAA,QACH,GAAG;AAAA,QACH,GAAG,QAAQ;AAAA;AAAA,MACb;AAAA,IACF,CAAC;AAED,QAAI,aAAa,GAAG;AAClB,WAAK,OAAO,YAAY,qBAAqB;AAAA,QAC3C;AAAA,MACF,CAAC;AACD,YAAM,IAAI,MAAM,2BAA2B,QAAQ,aAAa;AAAA,IAClE;AAEA,WAAO;AAAA,EACT;AACF;AAeA,SAAS,wBAAwB,MAA6B;AAC5D,QAAM,QAAoB,qBAAS,IAAI;AACvC,MAAI,UAAU,IAAI;AAChB,WAAO;AAAA,EACT,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAEA,SAAS,gBAAgB,MAAuB;AAC9C,SAAmB,4BAAgB,IAAI;AACzC;AAEA,SAAS,OAAa;AACpB,QAAM,UAAU,IAAI,mBAAmB;AAEvC,UAAQ,OAAO,OAAO,YAAY;AAChC,UAAM,QAAQ,MAAM;AAAA,EACtB,CAAC;AAED,UAAQ,OAAO,QAAQ;AACzB;AAEA,KAAK;","names":[]}